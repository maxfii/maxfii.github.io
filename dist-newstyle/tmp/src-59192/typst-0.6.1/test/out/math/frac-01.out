--- parse tree ---
[ Code
    "test/typ/math/frac-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/frac-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/frac-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MFrac
        (MGroup
           (Just "(")
           (Just ")")
           [ Text "|"
           , Text "x"
           , Text "|"
           , Text "+"
           , Text "|"
           , Text "y"
           , Text "|"
           ])
        (Text "2")
    , Text "<"
    , MFrac
        (MGroup (Just "[") (Just "]") [ Text "1" , Text "+" , Text "2" ])
        (Text "3")
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 math.equation(block: true, 
                               body: { math.frac(denom: text(body: [2]), 
                                                 num: { text(body: [|]), 
                                                        text(body: [x]), 
                                                        text(body: [|]), 
                                                        text(body: [+]), 
                                                        text(body: [|]), 
                                                        text(body: [y]), 
                                                        text(body: [|]) }), 
                                       text(body: [<]), 
                                       math.frac(denom: text(body: [3]), 
                                                 num: math.lr(body: ({ [[], 
                                                                       text(body: [1]), 
                                                                       text(body: [+]), 
                                                                       text(body: [2]), 
                                                                       []] }))) }, 
                               numbering: none), 
                 parbreak() })
