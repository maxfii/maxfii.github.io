--- parse tree ---
[ Code
    "test/typ/math/root-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/root-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/root-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/root-01.typ"
        ( line 3 , column 3 )
        (FuncCall (Ident (Identifier "sqrt")) [ BlockArg [ Text "a" ] ])
    , Code
        "test/typ/math/root-01.typ"
        ( line 3 , column 11 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-01.typ"
        ( line 4 , column 3 )
        (FuncCall (Ident (Identifier "sqrt")) [ BlockArg [ Text "f" ] ])
    , Code
        "test/typ/math/root-01.typ"
        ( line 4 , column 11 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-01.typ"
        ( line 5 , column 3 )
        (FuncCall (Ident (Identifier "sqrt")) [ BlockArg [ Text "q" ] ])
    , Code
        "test/typ/math/root-01.typ"
        ( line 5 , column 11 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-01.typ"
        ( line 6 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg [ MAttach Nothing (Just (Text "2")) (Text "a") ] ])
    , HardBreak
    , Code
        "test/typ/math/root-01.typ"
        ( line 7 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg [ MAttach (Just (Text "0")) Nothing (Text "n") ] ])
    , Code
        "test/typ/math/root-01.typ"
        ( line 7 , column 13 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-01.typ"
        ( line 8 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MAttach Nothing (Just (MGroup Nothing Nothing [])) (Text "b") ]
           ])
    , Code
        "test/typ/math/root-01.typ"
        ( line 8 , column 14 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-01.typ"
        ( line 9 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg [ MAttach Nothing (Just (Text "2")) (Text "b") ] ])
    , Code
        "test/typ/math/root-01.typ"
        ( line 9 , column 13 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-01.typ"
        ( line 10 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MAttach (Just (Text "1")) (Just (Text "2")) (Text "q") ]
           ])
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 math.equation(block: true, 
                               body: { math.sqrt(radicand: text(body: [a])), 
                                       text(body: [ ]), 
                                       math.sqrt(radicand: text(body: [f])), 
                                       text(body: [ ]), 
                                       math.sqrt(radicand: text(body: [q])), 
                                       text(body: [ ]), 
                                       math.sqrt(radicand: math.attach(b: none, 
                                                                       base: text(body: [a]), 
                                                                       t: text(body: [2]))), 
                                       linebreak(), 
                                       math.sqrt(radicand: math.attach(b: text(body: [0]), 
                                                                       base: text(body: [n]), 
                                                                       t: none)), 
                                       text(body: [ ]), 
                                       math.sqrt(radicand: math.attach(b: none, 
                                                                       base: text(body: [b]), 
                                                                       t: {  })), 
                                       text(body: [ ]), 
                                       math.sqrt(radicand: math.attach(b: none, 
                                                                       base: text(body: [b]), 
                                                                       t: text(body: [2]))), 
                                       text(body: [ ]), 
                                       math.sqrt(radicand: math.attach(b: text(body: [1]), 
                                                                       base: text(body: [q]), 
                                                                       t: text(body: [2]))) }, 
                               numbering: none), 
                 parbreak() })
