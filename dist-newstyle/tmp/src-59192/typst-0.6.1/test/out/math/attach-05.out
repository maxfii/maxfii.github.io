--- parse tree ---
[ Code
    "test/typ/math/attach-05.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/attach-05.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/attach-05.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/attach-05.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MAttach
                   (Just (MGroup Nothing Nothing [ MFrac (Text "1") (Text "2") ]))
                   (Just
                      (Code
                         "test/typ/math/attach-05.typ"
                         ( line 3 , column 16 )
                         (Ident (Identifier "zeta"))))
                   (Text "a")
               ]
           ])
    , Text ","
    , Code
        "test/typ/math/attach-05.typ"
        ( line 3 , column 23 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MAttach
                   (Just
                      (Code
                         "test/typ/math/attach-05.typ"
                         ( line 3 , column 30 )
                         (Ident (Identifier "alpha"))))
                   (Just (MGroup Nothing Nothing [ MFrac (Text "1") (Text "2") ]))
                   (Text "a")
               ]
           ])
    , Text ","
    , Code
        "test/typ/math/attach-05.typ"
        ( line 3 , column 44 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ MAttach
                   (Just (MGroup Nothing Nothing [ MFrac (Text "1") (Text "2") ]))
                   (Just (MGroup Nothing Nothing [ MFrac (Text "3") (Text "4") ]))
                   (Text "a")
               ]
           ])
    , HardBreak
    , Code
        "test/typ/math/attach-05.typ"
        ( line 4 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ Code
                   "test/typ/math/attach-05.typ"
                   ( line 4 , column 8 )
                   (FuncCall
                      (Ident (Identifier "attach"))
                      [ BlockArg [ Text "a" ]
                      , KeyValArg
                          (Identifier "tl") (Block (Content [ MFrac (Text "1") (Text "2") ]))
                      , KeyValArg
                          (Identifier "bl") (Block (Content [ MFrac (Text "3") (Text "4") ]))
                      ])
               ]
           ])
    , Text ","
    , Code
        "test/typ/math/attach-05.typ"
        ( line 5 , column 3 )
        (FuncCall
           (Ident (Identifier "sqrt"))
           [ BlockArg
               [ Code
                   "test/typ/math/attach-05.typ"
                   ( line 5 , column 8 )
                   (FuncCall
                      (Ident (Identifier "attach"))
                      [ BlockArg [ Text "a" ]
                      , KeyValArg
                          (Identifier "tl") (Block (Content [ MFrac (Text "1") (Text "2") ]))
                      , KeyValArg
                          (Identifier "bl") (Block (Content [ MFrac (Text "3") (Text "4") ]))
                      , KeyValArg
                          (Identifier "tr") (Block (Content [ MFrac (Text "1") (Text "2") ]))
                      , KeyValArg
                          (Identifier "br") (Block (Content [ MFrac (Text "3") (Text "4") ]))
                      ])
               ]
           ])
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 math.equation(block: true, 
                               body: { math.sqrt(radicand: math.attach(b: math.frac(denom: text(body: [2]), 
                                                                                    num: text(body: [1])), 
                                                                       base: text(body: [a]), 
                                                                       t: text(body: [ζ]))), 
                                       text(body: [,]), 
                                       math.sqrt(radicand: math.attach(b: text(body: [α]), 
                                                                       base: text(body: [a]), 
                                                                       t: math.frac(denom: text(body: [2]), 
                                                                                    num: text(body: [1])))), 
                                       text(body: [,]), 
                                       math.sqrt(radicand: math.attach(b: math.frac(denom: text(body: [2]), 
                                                                                    num: text(body: [1])), 
                                                                       base: text(body: [a]), 
                                                                       t: math.frac(denom: text(body: [4]), 
                                                                                    num: text(body: [3])))), 
                                       linebreak(), 
                                       math.sqrt(radicand: math.attach(base: text(body: [a]), 
                                                                       bl: math.frac(denom: text(body: [4]), 
                                                                                     num: text(body: [3])), 
                                                                       tl: math.frac(denom: text(body: [2]), 
                                                                                     num: text(body: [1])))), 
                                       text(body: [,]), 
                                       math.sqrt(radicand: math.attach(base: text(body: [a]), 
                                                                       bl: math.frac(denom: text(body: [4]), 
                                                                                     num: text(body: [3])), 
                                                                       br: math.frac(denom: text(body: [4]), 
                                                                                     num: text(body: [3])), 
                                                                       tl: math.frac(denom: text(body: [2]), 
                                                                                     num: text(body: [1])), 
                                                                       tr: math.frac(denom: text(body: [2]), 
                                                                                     num: text(body: [1])))) }, 
                               numbering: none), 
                 parbreak() })
