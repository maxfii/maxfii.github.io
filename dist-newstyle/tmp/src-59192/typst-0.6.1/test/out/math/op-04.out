--- parse tree ---
[ Code
    "test/typ/math/op-04.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/op-04.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/op-04.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ MAttach
        (Just (Text "x"))
        Nothing
        (Code
           "test/typ/math/op-04.typ"
           ( line 3 , column 3 )
           (FuncCall
              (Ident (Identifier "bold"))
              [ BlockArg
                  [ Code
                      "test/typ/math/op-04.typ"
                      ( line 3 , column 8 )
                      (FuncCall
                         (Ident (Identifier "op"))
                         [ BlockArg [ Text "bold" ]
                         , KeyValArg (Identifier "limits") (Literal (Boolean True))
                         ])
                  ]
              ]))
    , Text "y"
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 math.equation(block: true, 
                               body: { math.attach(b: text(body: [x]), 
                                                   base: math.bold(body: math.op(limits: true, 
                                                                                 text: text(body: [bold]))), 
                                                   t: none), 
                                       text(body: [y]) }, 
                               numbering: none), 
                 parbreak() })
