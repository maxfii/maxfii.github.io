--- parse tree ---
[ Code
    "test/typ/math/root-04.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/root-04.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/root-04.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    True
    [ Code
        "test/typ/math/root-04.typ"
        ( line 3 , column 3 )
        (FuncCall
           (Ident (Identifier "root"))
           [ BlockArg [ Text "2" ] , BlockArg [ Text "x" ] ])
    , Code
        "test/typ/math/root-04.typ"
        ( line 3 , column 14 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-04.typ"
        ( line 4 , column 3 )
        (FuncCall
           (Ident (Identifier "root"))
           [ BlockArg
               [ MFrac
                   (Text "3") (MGroup Nothing Nothing [ MFrac (Text "2") (Text "1") ])
               ]
           , BlockArg [ Text "x" ]
           ])
    , Code
        "test/typ/math/root-04.typ"
        ( line 4 , column 20 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-04.typ"
        ( line 5 , column 3 )
        (FuncCall
           (Ident (Identifier "root"))
           [ BlockArg [ MFrac (Text "1") (Text "11") ]
           , BlockArg [ Text "x" ]
           ])
    , Code
        "test/typ/math/root-04.typ"
        ( line 5 , column 17 )
        (Ident (Identifier "quad"))
    , Code
        "test/typ/math/root-04.typ"
        ( line 6 , column 3 )
        (FuncCall
           (Ident (Identifier "root"))
           [ BlockArg [ MFrac (MFrac (Text "1") (Text "2")) (Text "3") ]
           , BlockArg [ Text "1" ]
           ])
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 math.equation(block: true, 
                               body: { math.root(index: text(body: [2]), 
                                                 radicand: text(body: [x])), 
                                       text(body: [ ]), 
                                       math.root(index: math.frac(denom: math.frac(denom: text(body: [1]), 
                                                                                   num: text(body: [2])), 
                                                                  num: text(body: [3])), 
                                                 radicand: text(body: [x])), 
                                       text(body: [ ]), 
                                       math.root(index: math.frac(denom: text(body: [11]), 
                                                                  num: text(body: [1])), 
                                                 radicand: text(body: [x])), 
                                       text(body: [ ]), 
                                       math.root(index: math.frac(denom: text(body: [3]), 
                                                                  num: math.frac(denom: text(body: [2]), 
                                                                                 num: text(body: [1]))), 
                                                 radicand: text(body: [1])) }, 
                               numbering: none), 
                 parbreak() })
