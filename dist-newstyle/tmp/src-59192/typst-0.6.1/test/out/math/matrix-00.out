--- parse tree ---
[ Code
    "test/typ/math/matrix-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/matrix-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/matrix-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/math/matrix-00.typ"
    ( line 3 , column 2 )
    (Set
       (Ident (Identifier "align"))
       [ NormalArg (Ident (Identifier "center")) ])
, SoftBreak
, Equation
    False
    [ Code
        "test/typ/math/matrix-00.typ"
        ( line 4 , column 2 )
        (FuncCall (Ident (Identifier "mat")) [])
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 4 , column 8 )
        (Ident (Identifier "dot"))
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 5 , column 2 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg [ [ MGroup Nothing Nothing [] ] ] ])
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 5 , column 9 )
        (Ident (Identifier "dot"))
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 6 , column 2 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ BlockArg [ Text "1" ] , BlockArg [ Text "2" ] ])
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 6 , column 12 )
        (Ident (Identifier "dot"))
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 7 , column 2 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg [ [ Text "1" , Text "2" ] ] ])
    , HardBreak
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 8 , column 2 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg [ [ Text "1" ] , [ Text "2" ] ] ])
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 8 , column 12 )
        (Ident (Identifier "dot"))
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 9 , column 2 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg [ [ Text "1" , Text "2" ] , [ Text "3" , Text "4" ] ] ])
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 9 , column 18 )
        (Ident (Identifier "dot"))
    , Code
        "test/typ/math/matrix-00.typ"
        ( line 10 , column 2 )
        (FuncCall
           (Ident (Identifier "mat"))
           [ ArrayArg
               [ [ MGroup
                     Nothing Nothing [ Text "1" , Text "+" , MAlignPoint , Text "2" ]
                 , MFrac (Text "1") (Text "2")
                 ]
               , [ MGroup Nothing Nothing [ MAlignPoint , Text "3" ] , Text "4" ]
               ]
           ])
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [
]), 
                 math.equation(block: false, 
                               body: { math.mat(rows: ()), 
                                       text(body: [⋅]), 
                                       math.mat(rows: (({  }))), 
                                       text(body: [⋅]), 
                                       math.mat(rows: ((text(body: [1]), 
                                                        text(body: [2])))), 
                                       text(body: [⋅]), 
                                       math.mat(rows: ((text(body: [1]), 
                                                        text(body: [2])))), 
                                       linebreak(), 
                                       math.mat(rows: ((text(body: [1])), 
                                                       (text(body: [2])))), 
                                       text(body: [⋅]), 
                                       math.mat(rows: ((text(body: [1]), 
                                                        text(body: [2])), 
                                                       (text(body: [3]), 
                                                        text(body: [4])))), 
                                       text(body: [⋅]), 
                                       math.mat(rows: (({ text(body: [1]), 
                                                          text(body: [+]), 
                                                          math.alignpoint(), 
                                                          text(body: [2]) }, 
                                                        math.frac(denom: text(body: [2]), 
                                                                  num: text(body: [1]))), 
                                                       ({ math.alignpoint(), 
                                                          text(body: [3]) }, 
                                                        text(body: [4])))) }, 
                               numbering: none), 
                 parbreak() })
