--- parse tree ---
[ Code
    "test/typ/math/attach-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/math/attach-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/math/attach-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Equation
    False
    [ MAttach (Just (Text "x")) Nothing (Text "f")
    , Text "+"
    , MAttach Nothing (Just (Text "b")) (Text "t")
    , Text "+"
    , MAttach (Just (Text "1")) (Just (Text "2")) (Text "V")
    , Text "+"
    , Code
        "test/typ/math/attach-00.typ"
        ( line 3 , column 22 )
        (FuncCall
           (Ident (Identifier "attach"))
           [ BlockArg [ Text "A" ]
           , KeyValArg
               (Identifier "t")
               (Block
                  (Content
                     [ Code
                         "test/typ/math/attach-00.typ"
                         ( line 3 , column 35 )
                         (Ident (Identifier "alpha"))
                     ]))
           , KeyValArg
               (Identifier "b")
               (Block
                  (Content
                     [ Code
                         "test/typ/math/attach-00.typ"
                         ( line 3 , column 45 )
                         (Ident (Identifier "beta"))
                     ]))
           ])
    ]
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 math.equation(block: false, 
                               body: { math.attach(b: text(body: [x]), 
                                                   base: text(body: [f]), 
                                                   t: none), 
                                       text(body: [+]), 
                                       math.attach(b: none, 
                                                   base: text(body: [t]), 
                                                   t: text(body: [b])), 
                                       text(body: [+]), 
                                       math.attach(b: text(body: [1]), 
                                                   base: text(body: [V]), 
                                                   t: text(body: [2])), 
                                       text(body: [+]), 
                                       math.attach(b: text(body: [β]), 
                                                   base: text(body: [A]), 
                                                   t: text(body: [α])) }, 
                               numbering: none), 
                 parbreak() })
