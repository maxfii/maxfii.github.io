--- parse tree ---
[ Code
    "test/typ/compiler/methods-02.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/methods-02.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/methods-02.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/methods-02.typ"
    ( line 3 , column 2 )
    (Block
       (CodeBlock
          [ Let
              (BasicBind (Just (Identifier "rewritten")))
              (FuncCall
                 (FieldAccess
                    (Ident (Identifier "join"))
                    (FuncCall
                       (FieldAccess
                          (Ident (Identifier "map"))
                          (FuncCall
                             (FieldAccess
                                (Ident (Identifier "filter"))
                                (FuncCall
                                   (FieldAccess
                                      (Ident (Identifier "map"))
                                      (FuncCall
                                         (FieldAccess
                                            (Ident (Identifier "split"))
                                            (Literal
                                               (String "Hello. This is a sentence. And one more.")))
                                         [ NormalArg (Literal (String ".")) ]))
                                   [ NormalArg
                                       (FuncExpr
                                          [ NormalParam (Identifier "s") ]
                                          (FuncCall
                                             (FieldAccess
                                                (Ident (Identifier "trim"))
                                                (Ident (Identifier "s")))
                                             []))
                                   ]))
                             [ NormalArg
                                 (FuncExpr
                                    [ NormalParam (Identifier "s") ]
                                    (Not (Equals (Ident (Identifier "s")) (Literal (String "")))))
                             ]))
                       [ NormalArg
                           (FuncExpr
                              [ NormalParam (Identifier "s") ]
                              (Plus (Ident (Identifier "s")) (Literal (String "!"))))
                       ]))
                 [ NormalArg (Literal (String "\n ")) ])
          , FuncCall
              (Ident (Identifier "test"))
              [ NormalArg (Ident (Identifier "rewritten"))
              , NormalArg
                  (Literal (String "Hello!\n This is a sentence!\n And one more!"))
              ]
          ]))
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [âœ…]), 
                 parbreak() })
