--- parse tree ---
[ Code
    "test/typ/compiler/spread-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/spread-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/spread-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/spread-00.typ"
    ( line 3 , column 2 )
    (Block
       (CodeBlock
          [ LetFunc
              (Identifier "f")
              [ DefaultParam (Identifier "style") (Literal (String "normal"))
              , DefaultParam (Identifier "weight") (Literal (String "regular"))
              ]
              (Block
                 (CodeBlock
                    [ Plus
                        (Plus
                           (Plus
                              (Plus (Literal (String "(style: ")) (Ident (Identifier "style")))
                              (Literal (String ", weight: ")))
                           (Ident (Identifier "weight")))
                        (Literal (String ")"))
                    ]))
          , LetFunc
              (Identifier "myf")
              [ SinkParam (Just (Identifier "args")) ]
              (FuncCall
                 (Ident (Identifier "f"))
                 [ KeyValArg (Identifier "weight") (Literal (String "bold"))
                 , SpreadArg (Ident (Identifier "args"))
                 ])
          , FuncCall
              (Ident (Identifier "test"))
              [ NormalArg (FuncCall (Ident (Identifier "myf")) [])
              , NormalArg (Literal (String "(style: normal, weight: bold)"))
              ]
          , FuncCall
              (Ident (Identifier "test"))
              [ NormalArg
                  (FuncCall
                     (Ident (Identifier "myf"))
                     [ KeyValArg (Identifier "weight") (Literal (String "black")) ])
              , NormalArg (Literal (String "(style: normal, weight: black)"))
              ]
          , FuncCall
              (Ident (Identifier "test"))
              [ NormalArg
                  (FuncCall
                     (Ident (Identifier "myf"))
                     [ KeyValArg (Identifier "style") (Literal (String "italic")) ])
              , NormalArg (Literal (String "(style: italic, weight: bold)"))
              ]
          ]))
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [✅]), 
                 text(body: [✅]), 
                 parbreak() })
