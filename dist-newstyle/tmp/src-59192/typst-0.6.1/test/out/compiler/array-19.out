--- parse tree ---
[ Code
    "test/typ/compiler/array-19.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/array-19.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/array-19.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/array-19.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "position"))
                 (Array
                    [ Reg (Literal (String "Hi"))
                    , Reg (Literal (String "\10084\65039"))
                    , Reg (Literal (String "Love"))
                    ]))
              [ NormalArg
                  (FuncExpr
                     [ NormalParam (Identifier "s") ]
                     (Equals
                        (Ident (Identifier "s")) (Literal (String "\10084\65039"))))
              ])
       , NormalArg (Literal (Int 1))
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-19.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "position"))
                 (Array
                    [ Reg (Literal (String "Bye"))
                    , Reg (Literal (String "\128152"))
                    , Reg (Literal (String "Apart"))
                    ]))
              [ NormalArg
                  (FuncExpr
                     [ NormalParam (Identifier "s") ]
                     (Equals
                        (Ident (Identifier "s")) (Literal (String "\10084\65039"))))
              ])
       , NormalArg (Literal None)
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-19.typ"
    ( line 5 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "position"))
                 (Array
                    [ Reg (Literal (String "A"))
                    , Reg (Literal (String "B"))
                    , Reg (Literal (String "CDEF"))
                    , Reg (Literal (String "G"))
                    ]))
              [ NormalArg
                  (FuncExpr
                     [ NormalParam (Identifier "v") ]
                     (GreaterThan
                        (FuncCall
                           (FieldAccess (Ident (Identifier "len")) (Ident (Identifier "v")))
                           [])
                        (Literal (Int 2))))
              ])
       , NormalArg (Literal (Int 2))
       ])
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 parbreak() })
