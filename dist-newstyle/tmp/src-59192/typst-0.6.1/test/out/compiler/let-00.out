--- parse tree ---
[ Code
    "test/typ/compiler/let-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/let-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/let-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/let-00.typ"
    ( line 3 , column 2 )
    (Let (BasicBind (Just (Identifier "x"))) (Literal None))
, SoftBreak
, Code
    "test/typ/compiler/let-00.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg (Ident (Identifier "x")) , NormalArg (Literal None) ])
, ParBreak
, Comment
, Code
    "test/typ/compiler/let-00.typ"
    ( line 7 , column 2 )
    (Let (BasicBind (Just (Identifier "z"))) (Literal (Int 1)))
, SoftBreak
, Code
    "test/typ/compiler/let-00.typ"
    ( line 8 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg (Ident (Identifier "z"))
       , NormalArg (Literal (Int 1))
       ])
, ParBreak
, Comment
, Code
    "test/typ/compiler/let-00.typ"
    ( line 11 , column 2 )
    (Let
       (BasicBind (Just (Identifier "fill")))
       (Ident (Identifier "green")))
, SoftBreak
, Code
    "test/typ/compiler/let-00.typ"
    ( line 12 , column 2 )
    (LetFunc
       (Identifier "f")
       [ NormalParam (Identifier "body") ]
       (FuncCall
          (Ident (Identifier "rect"))
          [ KeyValArg (Identifier "width") (Literal (Numeric 2.0 Cm))
          , KeyValArg (Identifier "fill") (Ident (Identifier "fill"))
          , KeyValArg (Identifier "inset") (Literal (Numeric 5.0 Pt))
          , NormalArg (Ident (Identifier "body"))
          ]))
, SoftBreak
, Code
    "test/typ/compiler/let-00.typ"
    ( line 13 , column 2 )
    (FuncCall (Ident (Identifier "f")) [ BlockArg [ Text "Hi!" ] ])
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 parbreak(), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 parbreak(), 
                 text(body: [
]), 
                 text(body: [
]), 
                 rect(body: text(body: [Hi!]), 
                      fill: rgb(18%,80%,25%,100%), 
                      inset: 5.0pt, 
                      width: 2.0cm), 
                 parbreak() })
