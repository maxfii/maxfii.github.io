--- parse tree ---
[ Code
    "test/typ/compiler/array-16.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/array-16.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/array-16.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/array-16.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (Array
                    [ Reg (Literal (Int 1))
                    , Reg (Literal (Int 2))
                    , Reg (Literal (Int 3))
                    , Reg (Literal (Int 4))
                    ]))
              [ NormalArg (Literal (Int 2)) ])
       , NormalArg
           (Array [ Reg (Literal (Int 3)) , Reg (Literal (Int 4)) ])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (FuncCall
                    (Ident (Identifier "range")) [ NormalArg (Literal (Int 10)) ]))
              [ NormalArg (Literal (Int 2)) , NormalArg (Literal (Int 6)) ])
       , NormalArg
           (Array
              [ Reg (Literal (Int 2))
              , Reg (Literal (Int 3))
              , Reg (Literal (Int 4))
              , Reg (Literal (Int 5))
              ])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 5 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (FuncCall
                    (Ident (Identifier "range")) [ NormalArg (Literal (Int 10)) ]))
              [ NormalArg (Literal (Int 4))
              , KeyValArg (Identifier "count") (Literal (Int 3))
              ])
       , NormalArg
           (Array
              [ Reg (Literal (Int 4))
              , Reg (Literal (Int 5))
              , Reg (Literal (Int 6))
              ])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 6 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (FuncCall
                    (Ident (Identifier "range")) [ NormalArg (Literal (Int 10)) ]))
              [ NormalArg (Negated (Literal (Int 5)))
              , KeyValArg (Identifier "count") (Literal (Int 2))
              ])
       , NormalArg
           (Array [ Reg (Literal (Int 5)) , Reg (Literal (Int 6)) ])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 7 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (Array
                    [ Reg (Literal (Int 1))
                    , Reg (Literal (Int 2))
                    , Reg (Literal (Int 3))
                    ]))
              [ NormalArg (Literal (Int 2))
              , NormalArg (Negated (Literal (Int 2)))
              ])
       , NormalArg (Array [])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 8 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (Array
                    [ Reg (Literal (Int 1))
                    , Reg (Literal (Int 2))
                    , Reg (Literal (Int 3))
                    ]))
              [ NormalArg (Negated (Literal (Int 2)))
              , NormalArg (Literal (Int 2))
              ])
       , NormalArg (Array [ Reg (Literal (Int 2)) ])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 9 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "slice"))
                 (Array
                    [ Reg (Literal (Int 1))
                    , Reg (Literal (Int 2))
                    , Reg (Literal (Int 3))
                    ]))
              [ NormalArg (Negated (Literal (Int 3)))
              , NormalArg (Literal (Int 2))
              ])
       , NormalArg
           (Array [ Reg (Literal (Int 1)) , Reg (Literal (Int 2)) ])
       ])
, SoftBreak
, Code
    "test/typ/compiler/array-16.typ"
    ( line 10 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "join"))
                 (FuncCall
                    (FieldAccess
                       (Ident (Identifier "slice"))
                       (FuncCall
                          (FieldAccess
                             (Ident (Identifier "split")) (Literal (String "ABCD")))
                          [ NormalArg (Literal (String "")) ]))
                    [ NormalArg (Literal (Int 1))
                    , NormalArg (Negated (Literal (Int 1)))
                    ]))
              [ NormalArg (Literal (String "-")) ])
       , NormalArg (Literal (String "A-B-C-D"))
       ])
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 parbreak() })
