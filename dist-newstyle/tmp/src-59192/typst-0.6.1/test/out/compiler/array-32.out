--- parse tree ---
[ Code
    "test/typ/compiler/array-32.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/array-32.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/array-32.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Comment
, Code
    "test/typ/compiler/array-32.typ"
    ( line 4 , column 2 )
    (FuncCall
       (FieldAccess
          (Ident (Identifier "join"))
          (Array
             [ Reg (Block (Content [ Text "One" ]))
             , Reg (Block (Content [ Text "Two" ]))
             , Reg (Block (Content [ Text "Three" ]))
             ]))
       [ NormalArg (Block (Content [ Text "," , Space ]))
       , KeyValArg
           (Identifier "last")
           (Block (Content [ Space , Text "and" , Space ]))
       ])
, Text "."
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [One]), 
                 text(body: [, ]), 
                 text(body: [Two]), 
                 text(body: [ and ]), 
                 text(body: [Three]), 
                 text(body: [.]), 
                 parbreak() })
