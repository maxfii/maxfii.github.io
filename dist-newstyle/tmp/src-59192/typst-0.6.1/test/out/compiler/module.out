--- parse tree ---
[ Code
    "test/typ/compiler/module.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/module.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/module.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Comment
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 5 , column 2 )
    (Let (BasicBind (Just (Identifier "a"))) (Literal None))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 6 , column 2 )
    (Let (BasicBind (Just (Identifier "b"))) (Literal (Int 1)))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 7 , column 2 )
    (Let (BasicBind (Just (Identifier "c"))) (Literal (Int 2)))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 8 , column 2 )
    (Let (BasicBind (Just (Identifier "d"))) (Literal (Int 3)))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 9 , column 2 )
    (Let
       (BasicBind (Just (Identifier "value")))
       (Block (Content [ Text "hi" ])))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 10 , column 2 )
    (LetFunc
       (Identifier "item")
       [ NormalParam (Identifier "a") , NormalParam (Identifier "b") ]
       (Plus (Ident (Identifier "a")) (Ident (Identifier "b"))))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 11 , column 2 )
    (LetFunc
       (Identifier "push")
       [ NormalParam (Identifier "a") ]
       (Plus (Ident (Identifier "a")) (Literal (Int 1))))
, SoftBreak
, Code
    "test/typ/compiler/module.typ"
    ( line 12 , column 2 )
    (Let
       (BasicBind (Just (Identifier "fn")))
       (FuncCall
          (FieldAccess
             (Ident (Identifier "with")) (Ident (Identifier "rect")))
          [ KeyValArg (Identifier "fill") (Ident (Identifier "green"))
          , KeyValArg (Identifier "inset") (Literal (Numeric 5.0 Pt))
          ]))
, ParBreak
, Text "Some"
, Space
, Emph [ Text "includable" ]
, Space
, Text "text"
, Text "."
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
]), 
                 parbreak(), 
                 text(body: [Some ]), 
                 emph(body: text(body: [includable])), 
                 text(body: [ text.]), 
                 parbreak() })
