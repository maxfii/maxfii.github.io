--- parse tree ---
[ Code
    "test/typ/compiler/break-continue-09.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/break-continue-09.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/break-continue-09.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Comment
, Comment
, Code
    "test/typ/compiler/break-continue-09.typ"
    ( line 5 , column 2 )
    (For
       (BasicBind (Just (Identifier "color")))
       (Array
          [ Reg (Ident (Identifier "red"))
          , Reg (Ident (Identifier "blue"))
          , Reg (Ident (Identifier "green"))
          , Reg (Ident (Identifier "yellow"))
          ])
       (Block
          (Content
             [ SoftBreak
             , Code
                 "test/typ/compiler/break-continue-09.typ"
                 ( line 6 , column 4 )
                 (Set
                    (Ident (Identifier "text"))
                    [ KeyValArg (Identifier "font") (Literal (String "Roboto")) ])
             , SoftBreak
             , Code
                 "test/typ/compiler/break-continue-09.typ"
                 ( line 7 , column 4 )
                 (Show
                    Nothing
                    (FuncExpr
                       [ NormalParam (Identifier "it") ]
                       (FuncCall
                          (Ident (Identifier "text"))
                          [ KeyValArg (Identifier "fill") (Ident (Identifier "color"))
                          , NormalArg (Ident (Identifier "it"))
                          ])))
             , SoftBreak
             , Code
                 "test/typ/compiler/break-continue-09.typ"
                 ( line 8 , column 4 )
                 (FuncCall
                    (Ident (Identifier "smallcaps"))
                    [ NormalArg
                        (If
                           [ ( Not
                                 (Equals (Ident (Identifier "color")) (Ident (Identifier "green")))
                             , Block (Content [ SoftBreak , Text "Some" , ParBreak ])
                             )
                           , ( Literal (Boolean True)
                             , Block
                                 (Content
                                    [ SoftBreak
                                    , Text "Last"
                                    , SoftBreak
                                    , Code
                                        "test/typ/compiler/break-continue-09.typ"
                                        ( line 12 , column 6 )
                                        Break
                                    , ParBreak
                                    ])
                             )
                           ])
                    ])
             , ParBreak
             ])))
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [
]), 
                 text(body: [
], 
                      font: "Roboto"), 
                 text(body: { text(body: [
], 
                                   font: "Roboto"), 
                              smallcaps(body: { text(body: [
Some], 
                                                     font: "Roboto"), 
                                                parbreak() }), 
                              parbreak() }, 
                      fill: rgb(100%,25%,21%,100%), 
                      font: "Roboto"), 
                 text(body: [
], 
                      font: "Roboto"), 
                 text(body: [
], 
                      font: "Roboto"), 
                 text(body: { text(body: [
], 
                                   font: "Roboto"), 
                              smallcaps(body: { text(body: [
Some], 
                                                     font: "Roboto"), 
                                                parbreak() }), 
                              parbreak() }, 
                      fill: rgb(0%,45%,85%,100%), 
                      font: "Roboto"), 
                 text(body: [
], 
                      font: "Roboto"), 
                 text(body: [
], 
                      font: "Roboto"), 
                 text(body: { text(body: [
], 
                                   font: "Roboto"), 
                              smallcaps(body: { text(body: [
Last
], 
                                                     font: "Roboto"), 
                                                parbreak() }), 
                              parbreak() }, 
                      fill: rgb(18%,80%,25%,100%), 
                      font: "Roboto"), 
                 parbreak() })
