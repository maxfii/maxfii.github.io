--- parse tree ---
[ Code
    "test/typ/compiler/string-14.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/compiler/string-14.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/compiler/string-14.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Code
    "test/typ/compiler/string-14.typ"
    ( line 3 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace")) (Literal (String "ABC")))
              [ NormalArg (Literal (String ""))
              , NormalArg (Literal (String "-"))
              ])
       , NormalArg (Literal (String "-A-B-C-"))
       ])
, SoftBreak
, Code
    "test/typ/compiler/string-14.typ"
    ( line 4 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace")) (Literal (String "Ok")))
              [ NormalArg (Literal (String "Ok"))
              , NormalArg (Literal (String "Nope"))
              , KeyValArg (Identifier "count") (Literal (Int 0))
              ])
       , NormalArg (Literal (String "Ok"))
       ])
, SoftBreak
, Code
    "test/typ/compiler/string-14.typ"
    ( line 5 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace")) (Literal (String "to add?")))
              [ NormalArg (Literal (String ""))
              , NormalArg (Literal (String "How "))
              , KeyValArg (Identifier "count") (Literal (Int 1))
              ])
       , NormalArg (Literal (String "How to add?"))
       ])
, SoftBreak
, Code
    "test/typ/compiler/string-14.typ"
    ( line 6 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace")) (Literal (String "AB C DEF GH J")))
              [ NormalArg (Literal (String " "))
              , NormalArg (Literal (String ","))
              , KeyValArg (Identifier "count") (Literal (Int 2))
              ])
       , NormalArg (Literal (String "AB,C,DEF GH J"))
       ])
, SoftBreak
, Code
    "test/typ/compiler/string-14.typ"
    ( line 7 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace"))
                 (FuncCall
                    (FieldAccess
                       (Ident (Identifier "replace"))
                       (FuncCall
                          (FieldAccess
                             (Ident (Identifier "replace"))
                             (FuncCall
                                (FieldAccess
                                   (Ident (Identifier "replace")) (Literal (String "Walcemo")))
                                [ NormalArg (Literal (String "o"))
                                , NormalArg (Literal (String "k"))
                                ]))
                          [ NormalArg (Literal (String "e"))
                          , NormalArg (Literal (String "o"))
                          ]))
                    [ NormalArg (Literal (String "k"))
                    , NormalArg (Literal (String "e"))
                    ]))
              [ NormalArg (Literal (String "a"))
              , NormalArg (Literal (String "e"))
              ])
       , NormalArg (Literal (String "Welcome"))
       ])
, SoftBreak
, Code
    "test/typ/compiler/string-14.typ"
    ( line 14 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace")) (Literal (String "123")))
              [ NormalArg
                  (FuncCall
                     (Ident (Identifier "regex"))
                     [ NormalArg (Literal (String "\\d$")) ])
              , NormalArg (Literal (String "_"))
              ])
       , NormalArg (Literal (String "12_"))
       ])
, SoftBreak
, Code
    "test/typ/compiler/string-14.typ"
    ( line 15 , column 2 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg
           (FuncCall
              (FieldAccess
                 (Ident (Identifier "replace")) (Literal (String "123")))
              [ NormalArg
                  (FuncCall
                     (Ident (Identifier "regex"))
                     [ NormalArg (Literal (String "\\d{1,2}$")) ])
              , NormalArg (Literal (String "__"))
              ])
       , NormalArg (Literal (String "1__"))
       ])
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 text(body: [
]), 
                 text(body: [✅]), 
                 parbreak() })
