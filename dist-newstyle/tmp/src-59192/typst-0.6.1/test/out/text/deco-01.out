--- parse tree ---
[ Code
    "test/typ/text/deco-01.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/text/deco-01.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/text/deco-01.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Code
    "test/typ/text/deco-01.typ"
    ( line 2 , column 2 )
    (Let
       (BasicBind (Just (Identifier "redact")))
       (FuncCall
          (FieldAccess
             (Ident (Identifier "with")) (Ident (Identifier "strike")))
          [ KeyValArg (Identifier "stroke") (Literal (Numeric 10.0 Pt))
          , KeyValArg (Identifier "extent") (Literal (Numeric 5.0e-2 Em))
          ]))
, SoftBreak
, Code
    "test/typ/text/deco-01.typ"
    ( line 3 , column 2 )
    (Let
       (BasicBind (Just (Identifier "highlight")))
       (FuncCall
          (FieldAccess
             (Ident (Identifier "with")) (Ident (Identifier "strike")))
          [ KeyValArg
              (Identifier "stroke")
              (Plus
                 (Literal (Numeric 10.0 Pt))
                 (FuncCall
                    (Ident (Identifier "rgb"))
                    [ NormalArg (Literal (String "abcdef88")) ]))
          , KeyValArg (Identifier "extent") (Literal (Numeric 5.0e-2 Em))
          ]))
, ParBreak
, Comment
, Text "Sometimes,"
, Space
, Text "we"
, Space
, Text "work"
, Space
, Code
    "test/typ/text/deco-01.typ"
    ( line 6 , column 21 )
    (FuncCall
       (Ident (Identifier "redact"))
       [ BlockArg [ Text "in" , Space , Text "secret" ] ])
, Text "."
, SoftBreak
, Text "There"
, Space
, Text "might"
, Space
, Text "be"
, Space
, Code
    "test/typ/text/deco-01.typ"
    ( line 7 , column 17 )
    (FuncCall
       (Ident (Identifier "highlight")) [ BlockArg [ Text "redacted" ] ])
, Space
, Text "things"
, Text "."
, SoftBreak
, Text "underline"
, Text "("
, Text ")"
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [
]), 
                 parbreak(), 
                 text(body: [Sometimes, we work ]), 
                 strike(body: text(body: [in secret]), 
                        extent: 5.0e-2em, 
                        stroke: 10.0pt), 
                 text(body: [.
There might be ]), 
                 strike(body: text(body: [redacted]), 
                        extent: 5.0e-2em, 
                        stroke: (thickness: 10.0pt,
                                 color: rgb(67%,80%,93%,53%))), 
                 text(body: [ things.
underline()]), 
                 parbreak() })
