--- parse tree ---
[ Code
    "test/typ/text/space-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/text/space-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/text/space-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Comment
, Text "A"
, Code
    "test/typ/text/space-00.typ"
    ( line 3 , column 3 )
    (Let (BasicBind (Just (Identifier "x"))) (Literal (Int 1)))
, Text "B"
, Space
, Code
    "test/typ/text/space-00.typ"
    ( line 3 , column 17 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg (Ident (Identifier "x"))
       , NormalArg (Literal (Int 1))
       ])
, Space
, HardBreak
, Text "C"
, Space
, Code
    "test/typ/text/space-00.typ"
    ( line 4 , column 4 )
    (Let (BasicBind (Just (Identifier "x"))) (Literal (Int 2)))
, Text "D"
, Space
, Code
    "test/typ/text/space-00.typ"
    ( line 4 , column 17 )
    (FuncCall
       (Ident (Identifier "test"))
       [ NormalArg (Ident (Identifier "x"))
       , NormalArg (Literal (Int 2))
       ])
, Space
, HardBreak
, Text "E"
, Code
    "test/typ/text/space-00.typ"
    ( line 5 , column 3 )
    (If [ ( Literal (Boolean True) , Block (Content [ Text "F" ]) ) ])
, Text "G"
, Space
, HardBreak
, Text "H"
, Space
, Code
    "test/typ/text/space-00.typ"
    ( line 6 , column 4 )
    (If
       [ ( Literal (Boolean True)
         , Block (CodeBlock [ Literal (String "I") ])
         )
       ])
, Space
, Text "J"
, Space
, HardBreak
, Text "K"
, Space
, Code
    "test/typ/text/space-00.typ"
    ( line 7 , column 4 )
    (If
       [ ( Literal (Boolean True) , Block (Content [ Text "L" ]) )
       , ( Literal (Boolean True) , Block (Content []) )
       ])
, Text "M"
, Space
, HardBreak
, Code
    "test/typ/text/space-00.typ"
    ( line 8 , column 2 )
    (Let (BasicBind (Just (Identifier "c"))) (Literal (Boolean True)))
, Space
, Text "N"
, Code
    "test/typ/text/space-00.typ"
    ( line 8 , column 18 )
    (While
       (Ident (Identifier "c"))
       (Block
          (Content
             [ Code
                 "test/typ/text/space-00.typ"
                 ( line 8 , column 28 )
                 (Assign (Ident (Identifier "c")) (Literal (Boolean False)))
             , Text "O"
             ])))
, Space
, Text "P"
, Space
, HardBreak
, Code
    "test/typ/text/space-00.typ"
    ( line 9 , column 2 )
    (Let (BasicBind (Just (Identifier "c"))) (Literal (Boolean True)))
, Space
, Text "Q"
, Space
, Code
    "test/typ/text/space-00.typ"
    ( line 9 , column 19 )
    (While
       (Ident (Identifier "c"))
       (Block
          (CodeBlock
             [ Assign (Ident (Identifier "c")) (Literal (Boolean False))
             , Literal (String "R")
             ])))
, Space
, Text "S"
, Space
, HardBreak
, Text "T"
, Code
    "test/typ/text/space-00.typ"
    ( line 10 , column 3 )
    (For
       (BasicBind Nothing)
       (Array [ Reg (Literal None) ])
       (Block (CodeBlock [ Literal (String "U") ])))
, Text "V"
, SoftBreak
, Code
    "test/typ/text/space-00.typ"
    ( line 11 , column 2 )
    (Let (BasicBind (Just (Identifier "foo"))) (Literal (String "A")))
, Space
, HardBreak
, Code
    "test/typ/text/space-00.typ"
    ( line 12 , column 2 )
    (Ident (Identifier "foo"))
, Text "B"
, Space
, HardBreak
, Code
    "test/typ/text/space-00.typ"
    ( line 13 , column 2 )
    (Ident (Identifier "foo"))
, Space
, Text "B"
, Space
, HardBreak
, Code
    "test/typ/text/space-00.typ"
    ( line 14 , column 2 )
    (Ident (Identifier "foo"))
, Text "B"
, ParBreak
]
--- evaluated ---
document(body: { text(body: [
]), 
                 text(body: [A]), 
                 text(body: [B ]), 
                 text(body: [✅]), 
                 text(body: [ ]), 
                 linebreak(), 
                 text(body: [C ]), 
                 text(body: [D ]), 
                 text(body: [✅]), 
                 text(body: [ ]), 
                 linebreak(), 
                 text(body: [E]), 
                 text(body: [F]), 
                 text(body: [G ]), 
                 linebreak(), 
                 text(body: [H ]), 
                 text(body: [I]), 
                 text(body: [ J ]), 
                 linebreak(), 
                 text(body: [K ]), 
                 text(body: [L]), 
                 text(body: [M ]), 
                 linebreak(), 
                 text(body: [ N]), 
                 text(body: [O]), 
                 text(body: [ P ]), 
                 linebreak(), 
                 text(body: [ Q ]), 
                 text(body: [R]), 
                 text(body: [ S ]), 
                 linebreak(), 
                 text(body: [T]), 
                 text(body: [U]), 
                 text(body: [V
]), 
                 text(body: [ ]), 
                 linebreak(), 
                 text(body: [A]), 
                 text(body: [B ]), 
                 linebreak(), 
                 text(body: [A]), 
                 text(body: [ B ]), 
                 linebreak(), 
                 text(body: [A]), 
                 text(body: [B]), 
                 parbreak() })
