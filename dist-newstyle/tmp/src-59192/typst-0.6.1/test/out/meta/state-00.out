--- parse tree ---
[ Code
    "test/typ/meta/state-00.typ"
    ( line 1 , column 2 )
    (Let
       (BasicBind (Just (Identifier "test")))
       (FuncExpr
          [ NormalParam (Identifier "x") , NormalParam (Identifier "y") ]
          (Block
             (CodeBlock
                [ If
                    [ ( Equals (Ident (Identifier "x")) (Ident (Identifier "y"))
                      , Block (Content [ Text "\9989" ])
                      )
                    , ( Literal (Boolean True)
                      , Block
                          (Content
                             [ Text "\10060"
                             , Text "("
                             , Code
                                 "test/typ/meta/state-00.typ"
                                 ( line 1 , column 47 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "x")) ])
                             , Space
                             , Text "/"
                             , Text "="
                             , Space
                             , Code
                                 "test/typ/meta/state-00.typ"
                                 ( line 1 , column 59 )
                                 (FuncCall
                                    (Ident (Identifier "repr"))
                                    [ NormalArg (Ident (Identifier "y")) ])
                             , Text ")"
                             ])
                      )
                    ]
                ]))))
, SoftBreak
, Code
    "test/typ/meta/state-00.typ"
    ( line 2 , column 2 )
    (Let
       (BasicBind (Just (Identifier "s")))
       (FuncCall
          (Ident (Identifier "state"))
          [ NormalArg (Literal (String "hey"))
          , NormalArg (Literal (String "a"))
          ]))
, SoftBreak
, Code
    "test/typ/meta/state-00.typ"
    ( line 3 , column 2 )
    (LetFunc
       (Identifier "double")
       [ NormalParam (Identifier "it") ]
       (Times (Literal (Int 2)) (Ident (Identifier "it"))))
, ParBreak
, Code
    "test/typ/meta/state-00.typ"
    ( line 5 , column 2 )
    (FuncCall
       (FieldAccess
          (Ident (Identifier "update")) (Ident (Identifier "s")))
       [ NormalArg (Ident (Identifier "double")) ])
, SoftBreak
, Code
    "test/typ/meta/state-00.typ"
    ( line 6 , column 2 )
    (FuncCall
       (FieldAccess
          (Ident (Identifier "update")) (Ident (Identifier "s")))
       [ NormalArg (Ident (Identifier "double")) ])
, SoftBreak
, Equation True [ Text "2" , Text "+" , Text "3" ]
, SoftBreak
, Code
    "test/typ/meta/state-00.typ"
    ( line 8 , column 2 )
    (FuncCall
       (FieldAccess
          (Ident (Identifier "update")) (Ident (Identifier "s")))
       [ NormalArg (Ident (Identifier "double")) ])
, ParBreak
, Text "Is"
, Text ":"
, Space
, Code
    "test/typ/meta/state-00.typ"
    ( line 10 , column 6 )
    (FuncCall
       (FieldAccess
          (Ident (Identifier "display")) (Ident (Identifier "s")))
       [])
, Text ","
, SoftBreak
, Text "Was"
, Text ":"
, Space
, Code
    "test/typ/meta/state-00.typ"
    ( line 11 , column 7 )
    (FuncCall
       (Ident (Identifier "locate"))
       [ NormalArg
           (FuncExpr
              [ NormalParam (Identifier "location") ]
              (Block
                 (CodeBlock
                    [ Let
                        (BasicBind (Just (Identifier "it")))
                        (FuncCall
                           (FieldAccess
                              (Ident (Identifier "first"))
                              (FuncCall
                                 (Ident (Identifier "query"))
                                 [ NormalArg
                                     (FieldAccess
                                        (Ident (Identifier "equation")) (Ident (Identifier "math")))
                                 , NormalArg (Ident (Identifier "location"))
                                 ]))
                           [])
                    , FuncCall
                        (FieldAccess (Ident (Identifier "at")) (Ident (Identifier "s")))
                        [ NormalArg
                            (FuncCall
                               (FieldAccess
                                  (Ident (Identifier "location")) (Ident (Identifier "it")))
                               [])
                        ]
                    ])))
       ])
, Text "."
, ParBreak
]
"test/typ/meta/state-00.typ" (line 5, column 2):
Content does not have a method "update" or FieldAccess requires a dictionary
